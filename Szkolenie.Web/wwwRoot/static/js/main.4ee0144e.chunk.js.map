{"version":3,"sources":["ButtonP.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["ButtonP","props","Button","variant","color","children","fetchData","url","data","headers","Headers","set","console","log","body","JSON","stringify","fetch","method","then","resp","status","json","DivApp","styled","div","App","useState","lista","zmienListe","nazwaTowaru","zmienNazwaTowaru","idTowaru","zmienIdTowaru","filtr","ustawFiltr","filtrZmieniono","value","delay","debouncedValue","setDebouncedValue","useEffect","handler","setTimeout","clearTimeout","useDebounce","reload","onChange","e","target","Select","map","x","MenuItem","id","nazwa","onClick","prev","filter","onSubmit","preventDefault","v","zapis","type","name","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.4ee0144e.chunk.js","sourcesContent":["import { Button } from \"@material-ui/core\"\r\n\r\nconst ButtonP = (props:any) => {\r\n    return (\r\n      <Button variant=\"contained\" color=\"primary\" {...props}>\r\n          {props.children}\r\n      </Button>\r\n    )\r\n  }\r\n\r\n  export default ButtonP","import React, { useEffect, useState } from 'react';\nimport './App.css';\nimport { Button, MenuItem, Select, TextField } from '@material-ui/core';\nimport ButtonP from './ButtonP';\nimport styled from 'styled-components';\n\ninterface ITowar {\n  id: string\n  nazwa: string\n}\n\nfunction useDebounce(value: any, delay: any) {\n  const [debouncedValue, setDebouncedValue] = useState(value)\n\n  useEffect(() => {\n    const handler = setTimeout(() => {\n      setDebouncedValue(value)\n    }, delay)\n    return () => {\n      clearTimeout(handler)\n    }\n  }, [value])\n\n  return debouncedValue\n}\n\nconst fetchData = (url:string, data:object) => {\n  const headers = new Headers();\n  headers.set(\"Content-Type\", \"application/json;charset=UTF-8\");\n  headers.set(\"Accept\", \"application/json;charset=UTF-8\");\n  console.log(\"body:\", data)\n  const body = JSON.stringify(data);\n  const server = process.env.NODE_ENV === 'production' ? '' : \"http://localhost:5000\"\n\n  const req = fetch(server+url, {\n    method: 'POST',\n    headers,\n    body\n  })\n  return req.then((resp) => {\n    if (resp.status !== 204) return resp.json();    \n  })\n}\n\nconst DivApp = styled.div`\n  width: 800px;\n  margin: 0 auto;\n`\nfunction App() {\n  const [lista, zmienListe] = useState([] as ITowar[])\n  const [nazwaTowaru, zmienNazwaTowaru] = useState(\"\")\n  const [idTowaru, zmienIdTowaru] = useState(\"\")\n  const [filtr, ustawFiltr] = useState(\"\")\n  const filtrZmieniono = useDebounce(filtr, 1000)\n\n  useEffect(() => {\n    fetchData('towary/daj', {filtr}).then(json => {\n      zmienListe(json)\n    })    \n  }, [filtrZmieniono])\n\n  const reload = () => {\n    zmienListe([])\n    fetchData('towary/daj', {}).then((json:ITowar[]) => {\n      zmienListe(json)      \n    })\n  } \n\n  const zapis = (e:any) => {\n    e.preventDefault();\n    fetchData('towary/zapisz', {nazwa: nazwaTowaru, id:idTowaru})\n      .then(v => {\n        zmienNazwaTowaru(\"\")\n        zmienIdTowaru(\"\")\n        reload()\n      })\n  }\n\n  const usunTowar = () => {\n    fetchData('towary/usun', { id:idTowaru})\n      .then(() => {\n        zmienNazwaTowaru(\"\")\n        zmienListe(prev => prev.filter(x => x.id!==idTowaru))\n        zmienIdTowaru(\"\")\n      })\n  }\n\n  return (\n    <DivApp>\n      <div>\n        <p>Filtr:</p>\n        <input value={filtr} onChange={(e:any)=>ustawFiltr(e.target.value)}/>\n      </div>\n      <Select value={idTowaru} onChange={(e:any) => zmienIdTowaru(e.target.value)}>\n        {lista.map((x:ITowar) => (<MenuItem key={x.id} value={x.id}>{x.nazwa}</MenuItem>))}\n      </Select>\n      <Button onClick={usunTowar}>Usu≈Ñ wybrany</Button>\n      <form onSubmit={(e:any)=>zapis(e)}>\n        <input type=\"text\" name=\"nazwa\" value={nazwaTowaru} onChange={(e:any)=>zmienNazwaTowaru(e.target.value)}/>\n        <input type=\"submit\" value=\"Zapisz\"/>\n      </form>\n      <ButtonP onClick={reload}>\n        <div>Dodaj</div>\n      </ButtonP>      \n      <p>Filtr: {filtr}</p>\n      <p>Nazwa: {nazwaTowaru}</p>\n      <p>Id: {idTowaru}</p>\n    </DivApp>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}